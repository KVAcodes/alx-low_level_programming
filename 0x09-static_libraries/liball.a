!<arch>
0-isupper.c/    0           0     0     644     296       `
#include <stdio.h>
#include "main.h"
/**
 * _isupper - a function that checks for uppercase character
 * @c : int value to be convert by ASCII and then checked
 * Return: 1 if uppercase and 0 otherwise
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
		return (0);
}
0-memset.c/     0           0     0     644     339       `
#include <stdio.h>
#include "main.h"
/**
 * _memset - fills memory with a constant byte
 * @s: string
 * @b: the constant character
 * @n: no of bytes
 * Return: a pointer the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	int i;
	int num;

	num = (int) n;

	for (i = 0; i < num; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     415       `
#include <stdio.h>
#include "main.h"
/**
 * _strcat - a function that concatenates two strings
 * @dest: appended string
 * @src: source string
 *
 * Return: a pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	int x, y, z;

	for (x = 0; dest[x] != 0; x++)
	{
	}
	for (y = 0; src[y] != 0; y++)
	{
	}
	for (z = x; z <= (x + y - 1); z++)
	{
		dest[z] = src[z - x];
	}
	return (dest);
}


1-isdigit.c/    0           0     0     644     225       `
#include "main.h"
#include <stdio.h>

/**
 * _isdigit - checks for a digti
 * @c: c is int type
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     360       `
#include <stdio.h>
#include "main.h"
/**
 * _memcpy - copies a memory area
 * @dest: recipient memory area
 * @src: copied memory area
 * @n: number of bytes to be copied
 * Return: a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i, num;

	num = (int) n;
	for (i = 0; i < num; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     582       `
#include <stdio.h>
#include "main.h"
/**
 * _strncat - a function that concatenates two strings
 * @dest: appended string
 * @src: source string
 * @n: number of bytes
 *
 * Description: This function concatenates two strings
 * but it only appends the specified number of bytes
 * from the copied string to the appended one
 * Return: a pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int x, z;

	for (x = 0; dest[x] != 0; x++)
	{
	}
	for (z = x; (z <= (x - 1 + n) && src[z - x] != 0); z++)
	{
		dest[z] = src[z - x];
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     497       `
#include "main.h"
#include <stdio.h>
/**
 * _atoi - convert string to integer.
 * @s: character value.
 *
 * Return: n.
 */
int _atoi(char *s)
{
	int x;
	int signabs = 1;
	double num = 0;

	for (x = 0; s[x] != 0; x++)
	{
		if (s[x] == '-')
		{
			signabs = -signabs;
		}
		if (!((s[x] >= '0') && (s[x] <= '9')))
		{
			continue;
		}
		else
		{
			num = (num * 10) + (s[x] - '0');
			if (!((s[x + 1] >= '0') && (s[x + 1] <= '9')))
			{
				break;
			}
		}
	}
	num = signabs * num;
	return (num);
}

2-strchr.c/     0           0     0     644     474       `
#include <stdio.h>
#include "main.h"
/**
 * _strchr - locates a character first occurrence in a string
 * @s: the string
 * @c: the character
 * Return: s or NULL
 */
char *_strchr(char *s, char c)
{
	int i;
	/**
	 * The condition used in the for loop ensures that
	 * the address of s + i is returned even if one or more \0 characters
	 * are placed before the char c
	 */
	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return ('\0');
}
2-strlen.c/     0           0     0     644     264       `
#include <stdio.h>
#include "main.h"
/**
 * _strlen - returns the length of a string taking in its pointer
 * @s: pointer to the string
 *
 * Return: the length of the string i
 */
int _strlen(char *s)
{
	int i = 0;

	while (s[i] != 0)
	{
		i++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     499       `
#include <stdio.h>
#include "main.h"
/**
 * _strncpy - copies a string
 * @dest: recipient string
 * @src: copied string
 * @n: number of bytes to be copied
 *
 * Description: copies n bytes from a string into another
 * Return: string dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int x, y, i;

	for (i = 0; src[i] != 0; i++)
	{
	}
	for (x = 0; x < n && src[x] != 0; x++)
	{
		dest[x] = src[x];
	}
	if (i < n)
	{
		for (y = i; y < n; y++)
		{
			dest[y] = '\0';
		}
	}
	return (dest);
}

3-islower.c/    0           0     0     644     237       `
#include <stdio.h>
#include "main.h"
/**
 * _islower - checks for lower case character
 * @c: c is of int type
 * Return: 1 or 0
 */
int _islower(int c)
{
	int ret;

	if (c >= 97 && c <= 122)
		ret = 1;
	else
		ret = 0;
	return (ret);
}

3-puts.c/       0           0     0     644     224       `
#include <stdio.h>
#include "main.h"
/**
 * _puts - prints a string
 * @str: a string argument
 * Return: void
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != 0; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     352       `
#include <stdio.h>
#include "main.h"
/**
 * _strcmp - compares two stings
 * @s1: first string or pointer to string
 * @s2: second string or pointer to string
 *
 * Return: (s1[0] - s2[0] or 0 if s1[0] == s2[0]
 */
int _strcmp(char *s1, char *s2)
{
	int x;
	int y = 0;

	for (x = 0; s1[x] != 0 && y == 0; x++)
	{
		y = s1[x] - s2[x];
	}
	return (y);
}
3-strspn.c/     0           0     0     644     464       `
#include "main.h"
#include <stdio.h>
/**
 * _strspn - gets the length of a prefix substring
 * @s: string containing the prefix substring
 * @accept: string containing the matching characters
 * Return: the number of bytes matching
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, x;

	unsigned int num = 0;

	for (i = 0; s[i] != 32; i++)
	{
		for (x = 0; accept[x] != 0; x++)
		{
			if (s[i] == accept[x])
			{
				num += 1;
			}
		}
	}
	return (num);
}
4-isalpha.c/    0           0     0     644     243       `
#include <stdio.h>
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 * @c: c is of type int
 * Return: 0 or 1
 */
int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     477       `
#include <stdio.h>
#include "main.h"
/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string to be searched
 * @accept: string that contains the set of bytes
 * Return: a pointer to first occurrence in s or NULL if no
 * bytes are found to match
 */
char *_strpbrk(char *s, char *accept)
{
	int i, x;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (x = 0; accept[x] != 0; x++)
		{
			if (s[i] == accept[x])
			{
				return (s + i);
			}
		}
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     672       `
#include <stdio.h>
#include "main.h"
/**
 * _strstr - locates a substring
 * @haystack: string to be checked through
 * @needle: string to look for
 * Return: a pointer to the beginning of substring or null
 */
char *_strstr(char *haystack, char *needle)
{
	int z, p, x, i;
	int y = 0;
	int test = 0;

	for (z = 0; needle[z] != 0; z++)
	{
	}
	for (p = 0; haystack[p] != 0; p++)
	{
	}
	for (x = 0; x < p; x++)
	{
		if (haystack[x] == needle[y])
		{
			for (i = x; i < x + z; i++)
			{
				if (haystack[i] == needle[y])
				{
					test += 1;
				}
				y++;
			}
			if (test == z)
			{
				return (&haystack[x]);
			}
			else
			{
				continue;
			}
		}
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     282       `
#include <stdio.h>
#include "main.h"
/**
 * _abs - a function that computes the absolute value of an integer
 * @x: x is of int type
 * Return: the absolute value of ab
 */
int _abs(int x)
{
	if (x > 0)
		return (x);
	else if (x < 0)
		return (x + (-2 * x));
	else
		return (x);

}
9-strcpy.c/     0           0     0     644     345       `
#include "main.h"
#include <stdio.h>
/**
 * _strcpy -  a function that copies the string.
 * @dest : string to copied to
 * @src  : string to copu
 *
 *Return: the pointer to dest.
 */
char *_strcpy(char *dest, char *src)
{
	int x, y;

	for (x = 0; src[x] != 0; x++)
	{
	}
	for (y = 0; y <= x; y++)
	{
		dest[y] = src[y];
	}
	return (dest);
}



_putchar.c/     0           0     0     644     276       `
#include <unistd.h>

/**
   * _putchar - writes the character c to stdout
    * @c: The character to print
     *
      * Return: On success 1.
       * On error, -1 is returned, and errno is set appropriately.
        */
int _putchar(char c)
{
		return (write(1, &c, 1));
}

main.c/         0           0     0     644     154       `
#include "main.h"

int main(void)
{
	    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	        return (0);
}
